#!/usr/bin/env node

/**
 * 🐳 FormDee - Docker Deployment Script
 * 
 * This script automates FormDee Docker deployment by:
 * - Generating secure API keys automatically
 * - Building optimized Docker image
 * - Creating production-ready containers
 * - Setting up environment variables securely
 * - Providing deployment status and management commands
 * 
 * Usage: npm run deploy:docker:auto
 */

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const { exec, spawn } = require('child_process');
const readline = require('readline');

// Color codes for terminal output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// Helper function to colorize output
const colorize = (text, color) => `${colors[color]}${text}${colors.reset}`;

// Generate secure random key
function generateSecureKey(length = 32) {
  return crypto.randomBytes(length).toString('base64').slice(0, length);
}

// Execute command with promise
function execCommand(command, options = {}) {
  return new Promise((resolve, reject) => {
    console.log(colorize(`🔧 Running: ${command}`, 'blue'));
    exec(command, options, (error, stdout, stderr) => {
      if (error) {
        console.error(colorize(`❌ Command failed: ${command}`, 'red'));
        console.error(colorize(`Error: ${error.message}`, 'red'));
        reject(error);
        return;
      }
      if (stderr && !stderr.includes('WARNING')) {
        console.warn(colorize(`⚠️  Warning: ${stderr}`, 'yellow'));
      }
      console.log(colorize(`✅ Command completed: ${command}`, 'green'));
      resolve({ stdout, stderr });
    });
  });
}

// Stream command output in real-time
function streamCommand(command, args = []) {
  return new Promise((resolve, reject) => {
    console.log(colorize(`🔧 Running: ${command} ${args.join(' ')}`, 'blue'));
    
    const child = spawn(command, args, {
      stdio: ['pipe', 'pipe', 'pipe']
    });

    child.stdout.on('data', (data) => {
      process.stdout.write(data);
    });

    child.stderr.on('data', (data) => {
      process.stderr.write(data);
    });

    child.on('close', (code) => {
      if (code === 0) {
        console.log(colorize(`✅ Command completed successfully`, 'green'));
        resolve(code);
      } else {
        console.error(colorize(`❌ Command failed with exit code ${code}`, 'red'));
        reject(new Error(`Command failed with exit code ${code}`));
      }
    });

    child.on('error', (error) => {
      console.error(colorize(`❌ Command error: ${error.message}`, 'red'));
      reject(error);
    });
  });
}

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Promisify readline question
const question = (query) => new Promise((resolve) => rl.question(query, resolve));

// Check if Docker is available
async function checkDockerAvailability() {
  try {
    await execCommand('docker --version');
    await execCommand('docker info');
    return true;
  } catch (error) {
    console.error(colorize('\n❌ Docker is not available or not running.', 'red'));
    console.log('\nPlease ensure Docker is installed and running:');
    console.log('• macOS/Windows: Install Docker Desktop');
    console.log('• Linux: Install Docker Engine');
    console.log('• Start Docker daemon/service\n');
    return false;
  }
}

// Generate Docker environment file
function generateDockerEnv(config) {
  const envContent = `# FormDee - Docker Production Environment
# Generated by Docker deployment script on ${new Date().toISOString()}

# 🔗 Google Apps Script Configuration
GAS_BASE_URL=${config.gasBaseUrl}

# 🔐 Security Keys (Generated automatically)
ADMIN_API_KEY=${config.adminApiKey}
ADMIN_UI_KEY=${config.adminUiKey}

# 🌐 Domain Configuration
NEXT_PUBLIC_BASE_URL=${config.baseUrl}

# 🐳 Docker Configuration
NODE_ENV=production
PORT=3000

# 📝 Docker Deployment Notes:
# - Container runs on port 3000 (mapped to host port 3000)
# - Environment variables are securely passed to container
# - Keys are generated fresh for each deployment
# - Use docker-compose for production with reverse proxy
`;

  const envPath = path.join(process.cwd(), '.env.docker');
  fs.writeFileSync(envPath, envContent);
  console.log(colorize('✅ Created .env.docker file', 'green'));
  return envPath;
}

// Main Docker deployment function
async function deployWithDocker() {
  console.log('\n' + '='.repeat(60));
  console.log(colorize('🐳 FormDee - Docker Deployment Script', 'cyan'));
  console.log('='.repeat(60));
  
  console.log(colorize('\n🚀 Welcome to FormDee Docker deployment!', 'green'));
  console.log('This tool will build and deploy your FormDee application using Docker.\n');

  try {
    // Step 1: Check Docker availability
    console.log(colorize('📋 Step 1: Docker Environment Check', 'blue'));
    console.log('─'.repeat(40));
    
    const dockerAvailable = await checkDockerAvailability();
    if (!dockerAvailable) {
      process.exit(1);
    }
    console.log(colorize('✅ Docker is available and running', 'green'));

    // Step 2: Generate and collect API keys
    console.log(colorize('\n🔐 Step 2: API Keys Configuration', 'blue'));
    console.log('─'.repeat(40));
    
    const adminApiKey = `prod_${generateSecureKey(28)}`;
    console.log(colorize('✅ Generated secure ADMIN_API_KEY:', 'green'), colorize(adminApiKey.substring(0, 15) + '...', 'yellow'));
    
    console.log(colorize('\n🔑 ADMIN_UI_KEY Configuration:', 'magenta'));
    console.log('Please provide your ADMIN_UI_KEY for the form builder interface.');
    const adminUiKey = await question('Enter your ADMIN_UI_KEY: ');
    
    if (!adminUiKey || adminUiKey.length < 8) {
      throw new Error('ADMIN_UI_KEY must be at least 8 characters long for security.');
    }
    
    console.log(colorize('✅ ADMIN_UI_KEY configured:', 'green'), colorize(adminUiKey.substring(0, 8) + '...', 'yellow'));

    // Step 3: Collect deployment configuration
    console.log(colorize('\n📋 Step 3: Deployment Configuration', 'blue'));
    console.log('─'.repeat(40));
    
    console.log(colorize('🔗 Google Apps Script Configuration:', 'magenta'));
    const gasBaseUrl = await question('Enter your Google Apps Script deployment URL: ');
    
    if (!gasBaseUrl || !gasBaseUrl.includes('script.google.com')) {
      throw new Error('Invalid Google Apps Script URL. Please check the format.');
    }
    
    console.log(colorize('\n🌐 Domain Configuration:', 'magenta'));
    const deploymentType = await question('Deployment type? (1) Local Development (2) Production Domain: ');
    
    let baseUrl;
    if (deploymentType === '1') {
      baseUrl = 'http://localhost:3000';
      console.log(colorize('✅ Using local development URL:', 'green'), baseUrl);
    } else {
      baseUrl = await question('Enter your production domain (e.g., https://yourdomain.com): ');
      if (!baseUrl.startsWith('http')) {
        baseUrl = 'https://' + baseUrl;
      }
    }

    const config = {
      gasBaseUrl,
      adminApiKey,
      adminUiKey,
      baseUrl
    };

    // Step 4: Generate environment configuration
    console.log(colorize('\n📄 Step 4: Creating Docker Environment', 'blue'));
    console.log('─'.repeat(40));
    
    const envPath = generateDockerEnv(config);

    // Step 5: Stop existing containers
    console.log(colorize('\n🛑 Step 5: Stopping Existing Containers', 'blue'));
    console.log('─'.repeat(40));
    
    try {
      await execCommand('docker stop formDee || true');
      await execCommand('docker rm formDee || true');
      console.log(colorize('✅ Cleaned up existing containers', 'green'));
    } catch (error) {
      console.log(colorize('ℹ️  No existing containers to cleanup', 'yellow'));
    }

    // Step 6: Build Docker image
    console.log(colorize('\n🏗️  Step 6: Building Docker Image', 'blue'));
    console.log('─'.repeat(40));
    
    await streamCommand('docker', ['build', '-t', 'formdee:latest', '.']);
    console.log(colorize('✅ Docker image built successfully', 'green'));

    // Step 7: Run Docker container
    console.log(colorize('\n🚀 Step 7: Starting Docker Container', 'blue'));
    console.log('─'.repeat(40));
    
    const dockerRunArgs = [
      'run',
      '-d',
      '--name', 'formDee',
      '-p', '3000:3000',
      '--env-file', envPath,
      '--restart', 'unless-stopped',
      'formdee:latest'
    ];

    await execCommand(`docker ${dockerRunArgs.join(' ')}`);
    console.log(colorize('✅ Docker container started successfully', 'green'));

    // Step 8: Health check
    console.log(colorize('\n🏥 Step 8: Health Check', 'blue'));
    console.log('─'.repeat(40));
    
    console.log('Waiting for container to start...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    try {
      const { stdout } = await execCommand('docker logs formDee');
      if (stdout.includes('Ready') || stdout.includes('started')) {
        console.log(colorize('✅ Container is healthy and running', 'green'));
      }
    } catch (error) {
      console.log(colorize('⚠️  Container started but health check inconclusive', 'yellow'));
    }

    // Step 9: Show deployment information
    console.log(colorize('\n📊 Step 9: Deployment Summary', 'blue'));
    console.log('─'.repeat(40));
    
    const { stdout: containerId } = await execCommand('docker ps -q -f name=formDee');
    
    if (containerId.trim()) {
      console.log(colorize('\n🎉 Deployment Successful!', 'green'));
      console.log('');
      console.log(colorize('🌐 Application URL:', 'cyan'), baseUrl);
      console.log(colorize('🐳 Container ID:', 'cyan'), containerId.trim());
      console.log(colorize('📋 Container Name:', 'cyan'), 'formDee');
      console.log(colorize('🔧 Port Mapping:', 'cyan'), 'localhost:3000 → container:3000');
    } else {
      throw new Error('Container failed to start properly');
    }

    // Step 10: Management commands
    console.log(colorize('\n🛠️  Step 10: Management Commands', 'blue'));
    console.log('─'.repeat(40));
    
    console.log('\n📋 Container Management:');
    console.log(colorize('• View logs:', 'yellow'), 'docker logs formDee');
    console.log(colorize('• Stop container:', 'yellow'), 'docker stop formDee');
    console.log(colorize('• Start container:', 'yellow'), 'docker start formDee');
    console.log(colorize('• Restart container:', 'yellow'), 'docker restart formDee');
    console.log(colorize('• Remove container:', 'yellow'), 'docker rm formDee');
    console.log(colorize('• Container stats:', 'yellow'), 'docker stats formDee');
    
    console.log(colorize('\n📱 Quick Access:', 'magenta'));
    console.log('• Application: http://localhost:3000');
    console.log('• Form Builder: http://localhost:3000/builder');
    console.log('• API Health: http://localhost:3000/api/health');

    // Step 11: Google Apps Script setup reminder
    console.log(colorize('\n🔧 Step 11: Google Apps Script Configuration', 'red'));
    console.log('─'.repeat(40));
    
    console.log(colorize('📌 IMPORTANT: Configure Script Properties', 'red'));
    console.log('Add these keys to your Google Apps Script:');
    console.log('');
    console.log(colorize('   ADMIN_API_KEY:', 'yellow'), adminApiKey);
    console.log(colorize('   ADMIN_UI_KEY:', 'yellow'), adminUiKey);
    console.log('');
    console.log('1. Open Google Apps Script project');
    console.log('2. Go to Project Settings → Script Properties');
    console.log('3. Add both properties with the values shown above');

    console.log(colorize('\n✨ Docker Deployment Complete!', 'green'));
    console.log('Your FormDee application is running in a Docker container.');
    
  } catch (error) {
    console.error(colorize('\n❌ Docker deployment failed:', 'red'), error.message);
    console.log('\nTroubleshooting:');
    console.log('• Check Docker daemon is running');
    console.log('• Verify port 3000 is not in use');
    console.log('• Review Docker logs: docker logs formDee');
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Cleanup function
async function cleanup() {
  try {
    console.log(colorize('\n🧹 Cleaning up Docker resources...', 'yellow'));
    await execCommand('docker stop formDee || true');
    await execCommand('docker rm formDee || true');
    await execCommand('docker rmi formdee:latest || true');
    console.log(colorize('✅ Cleanup completed', 'green'));
  } catch (error) {
    console.error(colorize('⚠️  Cleanup had issues:', 'yellow'), error.message);
  }
}

// Main execution
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--cleanup')) {
    await cleanup();
    return;
  }
  
  try {
    await deployWithDocker();
  } catch (error) {
    console.error(colorize('\n💥 Unexpected error:', 'red'), error.message);
    process.exit(1);
  }
}

// Handle process termination
process.on('SIGINT', async () => {
  console.log(colorize('\n\n👋 Docker deployment cancelled by user.', 'yellow'));
  rl.close();
  process.exit(0);
});

// Run the deployment
if (require.main === module) {
  main();
}

module.exports = { deployWithDocker, generateSecureKey, cleanup };