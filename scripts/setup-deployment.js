#!/usr/bin/env node

/**
 * 🚀 FormDee - Interactive Deployment Setup Tool
 * 
 * This tool helps you set up FormDee for deployment by:
 * - Generating secure API keys automatically
 * - Collecting deployment information interactively
 * - Creating properly configured .env files
 * - Providing Google Apps Script setup instructions
 * 
 * Usage: npm run setup:deployment
 */

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Color codes for terminal output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// Helper function to colorize output
const colorize = (text, color) => `${colors[color]}${text}${colors.reset}`;

// Generate secure random key
function generateSecureKey(length = 32) {
  return crypto.randomBytes(length).toString('base64').slice(0, length);
}

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Promisify readline question
const question = (query) => new Promise((resolve) => rl.question(query, resolve));

// Main setup function
async function setupDeployment() {
  console.log('\n' + '='.repeat(60));
  console.log(colorize('🚀 FormDee - Interactive Deployment Setup', 'cyan'));
  console.log('='.repeat(60));
  
  console.log(colorize('\n✨ Welcome to FormDee deployment setup!', 'green'));
  console.log('This tool will help you configure your deployment environment.\n');

  try {
    // Step 1: Generate and collect API keys
    console.log(colorize('📝 Step 1: API Keys Configuration', 'blue'));
    console.log('─'.repeat(40));
    
    const adminApiKey = `prod_${generateSecureKey(28)}`;
    console.log(colorize('✅ Generated secure ADMIN_API_KEY:', 'green'), colorize(adminApiKey, 'yellow'));
    
    console.log(colorize('\n🔑 ADMIN_UI_KEY Configuration:', 'magenta'));
    console.log('Please provide your ADMIN_UI_KEY for the form builder interface.');
    const adminUiKey = await question('Enter your ADMIN_UI_KEY: ');
    
    if (!adminUiKey || adminUiKey.length < 8) {
      throw new Error('ADMIN_UI_KEY must be at least 8 characters long for security.');
    }
    
    console.log(colorize('✅ ADMIN_UI_KEY configured:', 'green'), colorize(adminUiKey, 'yellow'));
    
    // Step 2: Collect deployment information
    console.log(colorize('\n📋 Step 2: Deployment Configuration', 'blue'));
    console.log('─'.repeat(40));
    
    console.log(colorize('\n🔗 Google Apps Script Configuration:', 'magenta'));
    console.log('Please deploy your Google Apps Script first and get the deployment URL.');
    console.log('Format: https://script.google.com/macros/s/DEPLOYMENT_ID/exec\n');
    
    const gasBaseUrl = await question('Enter your Google Apps Script deployment URL: ');
    
    if (!gasBaseUrl || !gasBaseUrl.includes('script.google.com')) {
      throw new Error('Invalid Google Apps Script URL. Please check the format.');
    }
    
    console.log(colorize('\n🌐 Domain Configuration:', 'magenta'));
    const deploymentType = await question('Deployment type? (1) Local Development (2) Production Domain: ');
    
    let baseUrl;
    if (deploymentType === '1') {
      baseUrl = 'http://localhost:3000';
      console.log(colorize('✅ Using local development URL:', 'green'), baseUrl);
    } else {
      baseUrl = await question('Enter your production domain (e.g., https://yourdomain.com): ');
      if (!baseUrl.startsWith('http')) {
        baseUrl = 'https://' + baseUrl;
      }
    }

    // Step 3: Generate .env file
    console.log(colorize('\n📄 Step 3: Creating .env File', 'blue'));
    console.log('─'.repeat(40));

    const envContent = `# FormDee - Production Environment Configuration
# Generated by deployment setup tool on ${new Date().toISOString()}

# 🔗 Google Apps Script Configuration
# Server-side URL of your deployed Apps Script web app (ending with /exec)
GAS_BASE_URL=${gasBaseUrl}

# 🔐 Security Keys (Generated automatically - Keep these secure!)
# Secret used by Next.js API to authenticate to GAS admin endpoints
ADMIN_API_KEY=${adminApiKey}

# UI key required to access builder and admin routes
ADMIN_UI_KEY=${adminUiKey}

# 🌐 Domain Configuration
# Used by app/builder/[refKey]/page.tsx when generating absolute fetch URLs
NEXT_PUBLIC_BASE_URL=${baseUrl}

# 📝 Additional Configuration Notes:
# - Keep these keys secure and never commit them to version control
# - Use different keys for different environments (dev/staging/prod)
# - Rotate keys regularly for enhanced security
# - For production, consider using a secure secret management service
`;

    // Write .env file
    const envPath = path.join(process.cwd(), '.env');
    fs.writeFileSync(envPath, envContent);
    
    console.log(colorize('✅ Created .env file successfully!', 'green'));
    
    // Step 4: Google Apps Script setup instructions
    console.log(colorize('\n🔧 Step 4: Google Apps Script Configuration', 'blue'));
    console.log('─'.repeat(40));
    
    console.log(colorize('\n📌 IMPORTANT: Configure Script Properties', 'red'));
    console.log('You need to add these keys to your Google Apps Script:');
    console.log('');
    console.log('1. Open your Google Apps Script project');
    console.log('2. Go to Project Settings → Script Properties');
    console.log('3. Click "Add script property" and add these TWO properties:');
    console.log('');
    console.log(colorize('   Property Name:', 'yellow'), 'ADMIN_API_KEY');
    console.log(colorize('   Property Value:', 'yellow'), adminApiKey);
    console.log('');
    console.log(colorize('   Property Name:', 'yellow'), 'ADMIN_UI_KEY');
    console.log(colorize('   Property Value:', 'yellow'), adminUiKey);
    console.log('');
    console.log(colorize('4. Save the script properties', 'green'));
    
    // Step 5: Deployment options
    console.log(colorize('\n🚀 Step 5: Deployment Options', 'blue'));
    console.log('─'.repeat(40));
    
    console.log('\nYour FormDee is now configured! Choose your deployment method:');
    console.log('');
    console.log(colorize('📦 Vercel (Recommended):', 'cyan'));
    console.log('   npm run deploy:vercel');
    console.log('');
    console.log(colorize('🐳 Docker:', 'cyan'));
    console.log('   npm run deploy:docker');
    console.log('');
    console.log(colorize('🔧 Manual Build:', 'cyan'));
    console.log('   npm run build:production');
    console.log('');
    
    // Step 6: Security reminder
    console.log(colorize('\n🔒 Security Reminders', 'red'));
    console.log('─'.repeat(40));
    console.log('• Never commit your .env file to version control');
    console.log('• Keep your API keys secure and private');
    console.log('• Use different keys for different environments');
    console.log('• Rotate keys regularly for enhanced security');
    console.log('• For production, consider using environment-specific secret management');
    
    console.log(colorize('\n✨ Setup Complete!', 'green'));
    console.log('Your FormDee deployment is ready. Check the deployment guide for next steps.');
    console.log('');
    
  } catch (error) {
    console.error(colorize('\n❌ Setup failed:', 'red'), error.message);
    console.log('\nPlease check your inputs and try again.');
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Backup existing .env file
function backupExistingEnv() {
  const envPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(envPath)) {
    const backupPath = path.join(process.cwd(), '.env.backup.' + Date.now());
    fs.copyFileSync(envPath, backupPath);
    console.log(colorize(`📁 Backed up existing .env to: ${path.basename(backupPath)}`, 'yellow'));
  }
}

// Main execution
async function main() {
  try {
    backupExistingEnv();
    await setupDeployment();
  } catch (error) {
    console.error(colorize('\n💥 Unexpected error:', 'red'), error.message);
    process.exit(1);
  }
}

// Handle process termination
process.on('SIGINT', () => {
  console.log(colorize('\n\n👋 Setup cancelled by user.', 'yellow'));
  rl.close();
  process.exit(0);
});

// Run the setup
if (require.main === module) {
  main();
}

module.exports = { setupDeployment, generateSecureKey };